{"version":3,"sources":["pages/Report.jsx"],"names":["Option","Select","rowStyle","display","gap","gridTemplateColumns","header","fontWeight","fontSize","colStyle","flexDirection","container","padding","maxWidth","margin","position","height","marginTop","background","button","color","Report","useState","selectedFilter","setSelectedFilter","clientSearchTerm","setClientSearchTerm","vendorSearchTerm","setVendorSearchTerm","startDateSearchTerm","setStartDateSearchTerm","jobs","useFetch","request","list","result","vendors","products","downloadExcel","data","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","style","textAlign","marginLeft","placeholder","onChange","value","width","filter","j","startdate","status","map","onClick","type","e","target","date","client","toLowerCase","includes","vendorname","format"],"mappings":"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","file":"static/js/ReportPage.d196355b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as XLSX from \"xlsx\";\nimport { Button, DatePicker, Select } from \"antd\";\n\nimport useFetch from \"@/hooks/useFetch\";\nimport { request } from \"@/request\";\n\n// STYLING FOR REPORTS SECTION\nconst { Option } = Select;\nconst rowStyle = {\n  display: \"grid\",\n  gap: \"20px\",\n  gridTemplateColumns: \"repeat(7, 1fr)\",\n};\n\nconst header = {\n  fontWeight: \"Bold\",\n  fontSize: \"16px\",\n};\n\nconst colStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n};\n\nconst container = {\n  padding: \"20px\",\n  maxWidth: \"1200px\",\n  margin: \"10px auto\",\n  position: \"relative\",\n  height: \"100vh\",\n  marginTop: \"40px\",\n  background: \"#fff\",\n};\n\nconst button = {\n  background: \"#FF2828\",\n  color: \"white\",\n};\n// const finishedJobs  = jobs whose status is finished\n\nconst Report = () => {\n  const [selectedFilter, setSelectedFilter] = useState(\"My payment history\");\n  // const [selectedFilter, setSelectedFilter] = useState('My payment history');\n  const [clientSearchTerm, setClientSearchTerm] = useState(\"\");\n  const [vendorSearchTerm, setVendorSearchTerm] = useState(\"\");\n  const [startDateSearchTerm, setStartDateSearchTerm] = useState(null);\n\n  const jobs = useFetch(() => request.list(\"job\", {})).result;\n\n  const vendors = useFetch(() => request.list(\"vendor\", {})).result;\n  const products = useFetch(() => request.list(\"product\", {})).result;\n\n  const handleFilterChange = (value) => {\n    setSelectedFilter(value);\n    setClientSearchTerm(\"\");\n    setVendorSearchTerm(\"\");\n  };\n\n  const downloadExcel = (data) => {\n    const worksheet = XLSX.utils.json_to_sheet(data);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"DataSheet.xlsx\");\n  };\n\n  return (\n    <>\n      <div>\n        <h1\n          style={{\n            fontSize: \"30px\",\n            textAlign: \"center\",\n            margin: \"10px\",\n            marginTop: \"20px\",\n          }}\n        >\n          Reports\n        </h1>\n        <span style={{ fontSize: \"20px\", margin: \"10px\", marginLeft: \"50px\" }}>\n          Filter Reports By :\n        </span>\n        <Select\n          placeholder=\"Select Filter\"\n          onChange={handleFilterChange}\n          style={{ width: 200, margin: \"20px\", marginLeft: \"5px\" }}\n        >\n          <Option value=\"My payment history\"></Option>\n          <Option value=\"Last 15 days\"></Option>\n          <Option value=\"finished jobs\">Finished Jobs</Option>\n          <Option value=\"vendors\">Vendors</Option>\n          <Option value=\"products\">Product</Option>\n        </Select>\n        {selectedFilter === \"Last 15 days\" && (\n          <div>\n            {jobs && (\n              <div style={container}>\n                <div style={{ ...rowStyle, ...header }}>\n                <p>DATE</p>\n                  <p>TITLE</p>\n                  <p>CLIENT</p>\n                  <p>BUDGET</p>\n                  <p>VENDOR NAME</p>\n                  <p>UNIQUE ID</p>\n                  <p>STATUS</p>\n                </div>\n                <div style={colStyle}>\n                  {jobs &&\n                    jobs\n                      .filter(\n                        (j) =>\n                          j.startdate >= \"2023-06-13\" ||\n                          j.status === \"payment recieved\"\n                      )\n                      .map((j) => {\n                        return (\n                          <div style={rowStyle}>\n                           <p>{j[\"startdate\"]}</p>\n                            <p>{j[\"title\"]}</p>\n                            <p>{j[\"client\"]}</p>\n                            <p>{j[\"budget\"]}</p>\n                            <p>{j[\"vendorname\"]}</p>\n                            <p>{j[\"jobId\"]}</p>\n                            <p>{j[\"status\"]}</p>\n                          </div>\n                        );\n                      })}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      gap: \"20px\",\n                      marginTop: \"40px\",\n                      marginLeft: \"auto\",\n                    }}\n                  >\n                    <Button\n                      style={button}\n                      onClick={() =>\n                        downloadExcel(\n                          jobs.filter((j) => j.status === \"invoice sent\")\n                        )\n                      }\n                    >\n                      Download Jobs Excel Sheet\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Render download buttons for jobs data */}\n            <div>{/* Implement download logic for Excel, CSV, PDF */}</div>\n          </div>\n        )}\n        {selectedFilter === \"My payment history\" && (\n          <div>\n            <span\n              style={{ fontSize: \"20px\", margin: \"10px\", marginLeft: \"50px\" }}\n            >\n              Search by Client:\n            </span>\n            <input\n              type=\"text\"\n              value={clientSearchTerm}\n              onChange={(e) => setClientSearchTerm(e.target.value)}\n              style={{ margin: \"10px\" }}\n            />\n            <span\n              style={{ fontSize: \"20px\", margin: \"10px\", marginLeft: \"50px\" }}\n            >\n              Search by Vendor:\n            </span>\n\n            <input\n              type=\"text\"\n              value={vendorSearchTerm}\n              onChange={(e) => setVendorSearchTerm(e.target.value)}\n              style={{ margin: \"10px\" }}\n            />\n            <span\n              style={{ fontSize: \"20px\", margin: \"10px\", marginLeft: \"50px\" }}\n            >\n              Search by Start Date:\n            </span>\n            <DatePicker\n              value={startDateSearchTerm}\n              onChange={(date) => setStartDateSearchTerm(date)}\n              style={{ margin: \"10px\" }}\n            />\n            {jobs && (\n              <div style={container}>\n                <div style={{ ...rowStyle, ...header }}>\n                <p>DATE</p>\n                  <p>TITLE</p>\n                  <p>CLIENT</p>\n                  <p>BUDGET</p>\n                  <p>VENDOR NAME</p>\n                  <p>UNIQUE ID</p>\n                  <p>STATUS</p> \n                </div>\n                <div style={colStyle}>\n                  {jobs &&\n                    jobs\n                      .filter(\n                        (j) =>\n                          j.client?.toLowerCase()\n                            .includes(clientSearchTerm.toLowerCase()) &&\n                          j.vendorname?.toLowerCase()\n                            .includes(vendorSearchTerm.toLowerCase()) &&\n                          (startDateSearchTerm === null ||\n                            j.startdate ===\n                              startDateSearchTerm.format(\"YYYY-MM-DD\"))\n                      )\n                      .map((j) => {\n                        return (\n                          <div style={rowStyle}>\n                           <p>{j[\"startdate\"]}</p>\n                            <p>{j[\"title\"]}</p>\n                            <p>{j[\"client\"]}</p>\n                            <p>{j[\"budget\"]}</p>\n                            <p>{j[\"vendorname\"]}</p>\n                            <p>{j[\"jobId\"]}</p>\n                            <p>{j[\"status\"]}</p>\n                          </div>\n                    );\n                      })}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      gap: \"20px\",\n                      marginTop: \"40px\",\n                      marginLeft: \"auto\",\n                    }}\n                  >\n                    <Button\n                      style={button}\n                      onClick={() =>\n                        downloadExcel(\n                          jobs.filter((j) => j.status === \"invoice sent\")\n                        )\n                      }\n                    >\n                      Download Jobs Excel Sheet\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Render download buttons for jobs data */}\n            <div>{/* Implement download logic for Excel, CSV, PDF */}</div>\n          </div>\n        )}\n        {selectedFilter === \"finished jobs\" && (\n          <div>\n            {jobs && (\n              <div style={container}>\n                <div style={{ ...rowStyle, ...header }}>\n                  <p>DATE</p>\n                  <p>TITLE</p>\n                  <p>CLIENT</p>\n                  <p>BUDGET</p>\n                  <p>SALE</p>\n                  <p>UNIQUE ID</p>\n                  <p>STATUS</p>\n                </div>\n                <div style={colStyle}>\n                  {jobs &&\n                    jobs\n                      .filter(\n                        (j) =>\n                          j.status === \"payment done\" ||\n                          j.status === \"payment recieved\"\n                      )\n                      .map((j) => {\n                        return (\n                          <div style={rowStyle}>\n                            <p>{j[\"startdate\"]}</p>\n                            <p>{j[\"title\"]}</p>\n                            <p>{j[\"client\"]}</p>\n                            <p>{j[\"budget\"]}</p>\n                            <p>{j[\"sale\"]}</p>\n                            <p>{j[\"jobId\"]}</p>\n                            <p>{j[\"status\"]}</p>\n                          </div>\n                        );\n                      })}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      gap: \"20px\",\n                      marginTop: \"40px\",\n                      marginLeft: \"auto\",\n                    }}\n                  >\n                    <Button\n                      style={button}\n                      onClick={() =>\n                        downloadExcel(\n                          jobs.filter((j) => j.status === \"invoice sent\")\n                        )\n                      }\n                    >\n                      Download Jobs Excel Sheet\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Render download buttons for jobs data */}\n            <div>{/* Implement download logic for Excel, CSV, PDF */}</div>\n          </div>\n        )}\n\n        {selectedFilter === \"vendors\" && (\n          <div>\n            {vendors && (\n              <div style={container}>\n                <div style={{ ...rowStyle, ...header }}>\n                  <p>VENDOR NAME</p>\n                  <p>CONTACT</p>\n                  <p>TOTAL WORK ORDER VALUES</p>\n                  <p>Service</p>\n                </div>\n                <div style={colStyle}>\n                  {vendors &&\n                    vendors.map((j) => {\n                      return (\n                        <div style={rowStyle}>\n                          <p>{j[\"vendorname\"]}</p>\n                          <p>{j[\"phone\"]}</p>\n                          <p>{j[\"work\"]}</p>\n                          <p>{j[\"service\"]}</p>\n                        </div>\n                      );\n                    })}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      gap: \"20px\",\n                      marginTop: \"40px\",\n                      marginLeft: \"auto\",\n                    }}\n                  >\n                    <Button style={button} onClick={() => downloadExcel(jobs)}>\n                      Download Jobs Excel Sheet\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Render download buttons for jobs data */}\n            <div>{/* Implement download logic for Excel, CSV, PDF */}</div>\n          </div>\n        )}\n\n        {selectedFilter === \"products\" && (\n          <div>\n            {products && (\n              <div style={container}>\n                <h1>PAYMENT HISTORY</h1>\n                <div style={{ ...rowStyle, ...header }}>\n                  <p>PRODUCT NAME</p>\n                  <p>PRICE</p>\n                  <p>VENDOR NAME</p>\n                  <p>VENDOR PRICE</p>\n                  <p>ADMIN</p>\n                </div>\n                <div style={colStyle}>\n                  {products &&\n                    products.map((j) => {\n                      return (\n                        <div style={rowStyle}>\n                          <p>{j[\"productName\"]}</p>\n                          <p>{j[\"price\"]}</p>\n                          <p>{j[\"vendorname\"]}</p>\n                          <p>{j[\"vendorPrice\"]}</p>\n                          <p>{j[\"admin\"]}</p>\n                        </div>\n                      );\n                    })}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      gap: \"20px\",\n                      marginTop: \"40px\",\n                      marginLeft: \"auto\",\n                    }}\n                  >\n                    <Button style={button} onClick={() => downloadExcel(jobs)}>\n                      Download Jobs Excel Sheet\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Render download buttons for jobs data */}\n            <div>{/* Implement download logic for Excel, CSV, PDF */}</div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Report;\n"],"sourceRoot":""}